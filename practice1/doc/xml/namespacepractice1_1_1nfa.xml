<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacepractice1_1_1nfa" kind="namespace" language="Python">
    <compoundname>practice1::nfa</compoundname>
    <innerclass refid="classpractice1_1_1nfa_1_1__CreateNFA" prot="public">practice1::nfa::_CreateNFA</innerclass>
    <innerclass refid="classpractice1_1_1nfa_1_1__Node" prot="public">practice1::nfa::_Node</innerclass>
    <innerclass refid="classpractice1_1_1nfa_1_1NFA" prot="public">practice1::nfa::NFA</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacepractice1_1_1nfa_1a04b29073595dc5461c193ae3575fe1cd" prot="private" static="no" mutable="no">
        <type>list</type>
        <definition>list __alphabet_of_letters</definition>
        <argsstring></argsstring>
        <name>__alphabet_of_letters</name>
        <initializer>=  [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="40" column="1" bodyfile="nfa.py" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepractice1_1_1nfa_1aca23e1128e4dc5eba47ef5088ba933fb" prot="public" static="no" mutable="no">
        <type></type>
        <definition>config_dict</definition>
        <argsstring></argsstring>
        <name>config_dict</name>
        <initializer>=  json.load(logging_configuration_file)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="35" column="1" bodyfile="nfa.py" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacepractice1_1_1nfa_1a4d9a2e5db8da6340541e17cde0bc5680" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>list</type>
        <definition> list practice1.nfa._get_ways</definition>
        <argsstring>(_Node state, str letter)</argsstring>
        <name>_get_ways</name>
        <param>
          <type><ref refid="classpractice1_1_1nfa_1_1__Node" kindref="compound">_Node</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>str</type>
          <declname>letter</declname>
        </param>
        <briefdescription>
<para>Returns a list of states that can be entered by a given letter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>state of <ref refid="classpractice1_1_1nfa_1_1NFA" kindref="compound">NFA</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>letter</parametername>
</parameternamelist>
<parameterdescription>
<para>letter from preset alphabet </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>list list of states that can be entered by a given letter </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="88" column="1" bodyfile="nfa.py" bodystart="88" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacepractice1_1_1nfa_1a12e43040f4837c23c481fc929939fed5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition> bool practice1.nfa._is_letter</definition>
        <argsstring>(str symbol)</argsstring>
        <name>_is_letter</name>
        <param>
          <type>str</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
<para>Checks for the presence of a character in the alphabet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if symbol in alphabet </para>
</simplesect>
<simplesect kind="return"><para>False if symbol not in alphabet </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="43" column="1" bodyfile="nfa.py" bodystart="43" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacepractice1_1_1nfa_1a44b82383fce3d09db5a6b4ee9e553c6b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition> bool practice1.nfa._is_way_to</definition>
        <argsstring>(_Node state, str letter)</argsstring>
        <name>_is_way_to</name>
        <param>
          <type><ref refid="classpractice1_1_1nfa_1_1__Node" kindref="compound">_Node</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>str</type>
          <declname>letter</declname>
        </param>
        <briefdescription>
<para>Checks for the presence letter in possible transitions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>state of <ref refid="classpractice1_1_1nfa_1_1NFA" kindref="compound">NFA</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>letter</parametername>
</parameternamelist>
<parameterdescription>
<para>letter from preset alphabet </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if ways exist </para>
</simplesect>
<simplesect kind="return"><para>False if ways don&apos;t exist </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="75" column="1" bodyfile="nfa.py" bodystart="75" bodyend="87"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>module - Implementation of <ref refid="classpractice1_1_1nfa_1_1NFA" kindref="compound">NFA</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="nfa.py" line="1" column="1"/>
  </compounddef>
</doxygen>
