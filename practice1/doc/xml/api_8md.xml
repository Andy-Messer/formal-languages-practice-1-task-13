<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="api_8md" kind="file" language="Markdown">
    <compoundname>api.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Summary</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Members<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Descriptions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">--------------------------------|---------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">`namespace<sp/>`[`practice1`](#namespacepractice1)<sp/>|<sp/>Python<sp/>Library<sp/>-<sp/>Solve<sp/>for<sp/>homework:<sp/>&apos;Formal<sp/>Languages,<sp/>Practice<sp/>1,<sp/>task<sp/>13&apos;.</highlight></codeline>
<codeline><highlight class="normal">`namespace<sp/>`[`practice1::dump`](#namespacepractice1_1_1dump)<sp/>|<sp/>module<sp/>-<sp/>Dump<sp/>utility<sp/>of<sp/>NFA.</highlight></codeline>
<codeline><highlight class="normal">`namespace<sp/>`[`practice1::nfa`](#namespacepractice1_1_1nfa)<sp/>|<sp/>module<sp/>-<sp/>Implementation<sp/>of<sp/>[NFA](#classpractice1_1_1nfa_1_1NFA).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>namespace<sp/>`practice1`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Python<sp/>Library<sp/>-<sp/>Solve<sp/>for<sp/>homework:<sp/>&apos;Formal<sp/>Languages,<sp/>Practice<sp/>1,<sp/>task<sp/>13&apos;.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Summary</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Members<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Descriptions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">--------------------------------|---------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">`public<sp/>def<sp/>`[`solve`](#namespacepractice1_1a4f1e2327621575169836b24fad1c4cc0)`(istream,ostream)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Solution<sp/>for<sp/>the<sp/>task.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Members</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/>def<sp/>`[`solve`](#namespacepractice1_1a4f1e2327621575169836b24fad1c4cc0)`(istream,ostream)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Solution<sp/>for<sp/>the<sp/>task.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Корректность:<sp/>воспользуемся<sp/>тем,<sp/>что<sp/>любая<sp/>регулярка<sp/>задаёт<sp/>НКА.<sp/>А<sp/>значит<sp/>если<sp/>подслово<sp/>может<sp/>быть<sp/>прочитано<sp/>НКА,<sp/>то<sp/>оно<sp/>принадлежит<sp/>установленному<sp/>языку.<sp/>Более<sp/>точно,<sp/>переберем<sp/>все<sp/>подстроки<sp/>данной<sp/>нам<sp/>строки<sp/>и<sp/>попытаемся<sp/>их<sp/>прочитать,<sp/>длина<sp/>наибольшей<sp/>прочитанной<sp/>строки<sp/>будет<sp/>ответом.<sp/>Верность<sp/>построения<sp/>НКА<sp/>доказывается<sp/>самим<sp/>алгоритмом<sp/>построения.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>namespace<sp/>`practice1::dump`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">module<sp/>-<sp/>Dump<sp/>utility<sp/>of<sp/>NFA.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Summary</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Members<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Descriptions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">--------------------------------|---------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">`public<sp/>def<sp/>`[`__dump__`](#namespacepractice1_1_1dump_1ad9f715f29da831aa7643c91af5ebe458)`(nfa,filename)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/></highlight></codeline>
<codeline><highlight class="normal">`private<sp/>def<sp/>`[`__get_transitions_count`](#namespacepractice1_1_1dump_1a48a26379315f5034651c9f7bb9bb4fe5)`(node)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Counts<sp/>the<sp/>number<sp/>of<sp/>possible<sp/>transitions.</highlight></codeline>
<codeline><highlight class="normal">`public<sp/>def<sp/>`[`__print__`](#namespacepractice1_1_1dump_1ab26a8f699adf1b51bbb17f5d6b0f5286)`(nfa)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Dump<sp/>NFA.</highlight></codeline>
<codeline><highlight class="normal">`public<sp/>def<sp/>`[`__print_brief__`](#namespacepractice1_1_1dump_1ae6922a078c8fb18193cfe597b9590312)`(node)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Print<sp/>a<sp/>summary<sp/>of<sp/>the<sp/>NFA<sp/>node.</highlight></codeline>
<codeline><highlight class="normal">`public<sp/>def<sp/>`[`__print_node__`](#namespacepractice1_1_1dump_1ade4c74aabe15dae245a2b47484ca9612)`(node)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Printing<sp/>node<sp/>of<sp/>NFA.</highlight></codeline>
<codeline><highlight class="normal">`private<sp/>def<sp/>`[`_tree_remove`](#namespacepractice1_1_1dump_1a99dcf84e0b8fa8cb8f8c888ffc8f198f)`(str<sp/>top)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Removes<sp/>all<sp/>files<sp/>in<sp/>the<sp/>current<sp/>directory.</highlight></codeline>
<codeline><highlight class="normal">`public<sp/>str<sp/>`[`make_new_state`](#namespacepractice1_1_1dump_1a8d3277da1b00286352f693cdb9c011a0)`(node)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Generate<sp/>new<sp/>name<sp/>for<sp/>id(node)<sp/>in<sp/>format:<sp/>f&apos;q<sp/>+<sp/>{id}&apos;.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Members</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/>def<sp/>`[`__dump__`](#namespacepractice1_1_1dump_1ad9f715f29da831aa7643c91af5ebe458)`(nfa,filename)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`private<sp/>def<sp/>`[`__get_transitions_count`](#namespacepractice1_1_1dump_1a48a26379315f5034651c9f7bb9bb4fe5)`(node)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Counts<sp/>the<sp/>number<sp/>of<sp/>possible<sp/>transitions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Parameters</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`node`<sp/>node<sp/>that<sp/>number<sp/>of<sp/>transitions<sp/>is<sp/>being<sp/>searched<sp/>for<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Returns</highlight></codeline>
<codeline><highlight class="normal">count:<sp/>number<sp/>of<sp/>transitions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/>def<sp/>`[`__print__`](#namespacepractice1_1_1dump_1ab26a8f699adf1b51bbb17f5d6b0f5286)`(nfa)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Dump<sp/>NFA.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Make<sp/>notes<sp/>about<sp/>nodes<sp/>and<sp/>their<sp/>connections<sp/></highlight></codeline>
<codeline><highlight class="normal">####<sp/>Parameters</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`nfa`<sp/>nondeterministic<sp/>finite<sp/>automaton<sp/>that<sp/>need<sp/>to<sp/>be<sp/>print</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/>def<sp/>`[`__print_brief__`](#namespacepractice1_1_1dump_1ae6922a078c8fb18193cfe597b9590312)`(node)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Print<sp/>a<sp/>summary<sp/>of<sp/>the<sp/>NFA<sp/>node.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Short<sp/>output<sp/>format:<sp/>&apos;node.name<sp/>node.final&apos;<sp/></highlight></codeline>
<codeline><highlight class="normal">####<sp/>Parameters</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`node`<sp/>node<sp/>the<sp/>debugrmation<sp/>about<sp/>which<sp/>should<sp/>be<sp/>output</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/>def<sp/>`[`__print_node__`](#namespacepractice1_1_1dump_1ade4c74aabe15dae245a2b47484ca9612)`(node)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Printing<sp/>node<sp/>of<sp/>NFA.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Output<sp/>the<sp/>name<sp/>of<sp/>the<sp/>node,<sp/>its<sp/>final<sp/>and<sp/>a<sp/>list<sp/>of<sp/>neighbors<sp/>with<sp/>their<sp/>number<sp/></highlight></codeline>
<codeline><highlight class="normal">####<sp/>Parameters</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`node`<sp/>printing<sp/>node</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`private<sp/>def<sp/>`[`_tree_remove`](#namespacepractice1_1_1dump_1a99dcf84e0b8fa8cb8f8c888ffc8f198f)`(str<sp/>top)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Removes<sp/>all<sp/>files<sp/>in<sp/>the<sp/>current<sp/>directory.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Parameters</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`top`<sp/>Name<sp/>of<sp/>initial<sp/>directory.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/>str<sp/>`[`make_new_state`](#namespacepractice1_1_1dump_1a8d3277da1b00286352f693cdb9c011a0)`(node)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Generate<sp/>new<sp/>name<sp/>for<sp/>id(node)<sp/>in<sp/>format:<sp/>f&apos;q<sp/>+<sp/>{id}&apos;.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Parameters</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`node`<sp/>node<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Returns</highlight></codeline>
<codeline><highlight class="normal">name:<sp/>new<sp/>name<sp/>of<sp/>node</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>namespace<sp/>`practice1::nfa`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">module<sp/>-<sp/>Implementation<sp/>of<sp/>[NFA](#classpractice1_1_1nfa_1_1NFA).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Summary</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Members<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Descriptions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">--------------------------------|---------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">`private<sp/>list<sp/>`[`_get_ways`](#namespacepractice1_1_1nfa_1a4d9a2e5db8da6340541e17cde0bc5680)`(`[`_Node`](#classpractice1_1_1nfa_1_1__Node)`<sp/>state,str<sp/>letter)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>states<sp/>that<sp/>can<sp/>be<sp/>entered<sp/>by<sp/>a<sp/>given<sp/>letter.</highlight></codeline>
<codeline><highlight class="normal">`private<sp/>bool<sp/>`[`_is_letter`](#namespacepractice1_1_1nfa_1a12e43040f4837c23c481fc929939fed5)`(str<sp/>symbol)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Checks<sp/>for<sp/>the<sp/>presence<sp/>of<sp/>a<sp/>character<sp/>in<sp/>the<sp/>alphabet.</highlight></codeline>
<codeline><highlight class="normal">`private<sp/>bool<sp/>`[`_is_way_to`](#namespacepractice1_1_1nfa_1a44b82383fce3d09db5a6b4ee9e553c6b)`(`[`_Node`](#classpractice1_1_1nfa_1_1__Node)`<sp/>state,str<sp/>letter)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Checks<sp/>for<sp/>the<sp/>presence<sp/>letter<sp/>in<sp/>possible<sp/>transitions.</highlight></codeline>
<codeline><highlight class="normal">`class<sp/>`[`practice1::nfa::_CreateNFA`](#classpractice1_1_1nfa_1_1__CreateNFA)<sp/>|<sp/>Functor<sp/>for<sp/>creating<sp/>[NFA](#classpractice1_1_1nfa_1_1NFA).</highlight></codeline>
<codeline><highlight class="normal">`class<sp/>`[`practice1::nfa::_Node`](#classpractice1_1_1nfa_1_1__Node)<sp/>|<sp/>Section:<sp/>Working<sp/>with<sp/>states<sp/>of<sp/>[NFA](#classpractice1_1_1nfa_1_1NFA).</highlight></codeline>
<codeline><highlight class="normal">`class<sp/>`[`practice1::nfa::NFA`](#classpractice1_1_1nfa_1_1NFA)<sp/>|<sp/>Section:<sp/>Working<sp/>with<sp/>[NFA](#classpractice1_1_1nfa_1_1NFA).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Members</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`private<sp/>list<sp/>`[`_get_ways`](#namespacepractice1_1_1nfa_1a4d9a2e5db8da6340541e17cde0bc5680)`(`[`_Node`](#classpractice1_1_1nfa_1_1__Node)`<sp/>state,str<sp/>letter)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>a<sp/>list<sp/>of<sp/>states<sp/>that<sp/>can<sp/>be<sp/>entered<sp/>by<sp/>a<sp/>given<sp/>letter.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Parameters</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`state`<sp/>state<sp/>of<sp/>[NFA](#classpractice1_1_1nfa_1_1NFA)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`letter`<sp/>letter<sp/>from<sp/>preset<sp/>alphabet<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Returns</highlight></codeline>
<codeline><highlight class="normal">list<sp/>list<sp/>of<sp/>states<sp/>that<sp/>can<sp/>be<sp/>entered<sp/>by<sp/>a<sp/>given<sp/>letter</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`private<sp/>bool<sp/>`[`_is_letter`](#namespacepractice1_1_1nfa_1a12e43040f4837c23c481fc929939fed5)`(str<sp/>symbol)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Checks<sp/>for<sp/>the<sp/>presence<sp/>of<sp/>a<sp/>character<sp/>in<sp/>the<sp/>alphabet.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Parameters</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`symbol`<sp/>user-supplied<sp/>character<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Returns</highlight></codeline>
<codeline><highlight class="normal">True<sp/>if<sp/>symbol<sp/>in<sp/>alphabet<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Returns</highlight></codeline>
<codeline><highlight class="normal">False<sp/>if<sp/>symbol<sp/>not<sp/>in<sp/>alphabet</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`private<sp/>bool<sp/>`[`_is_way_to`](#namespacepractice1_1_1nfa_1a44b82383fce3d09db5a6b4ee9e553c6b)`(`[`_Node`](#classpractice1_1_1nfa_1_1__Node)`<sp/>state,str<sp/>letter)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Checks<sp/>for<sp/>the<sp/>presence<sp/>letter<sp/>in<sp/>possible<sp/>transitions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Parameters</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`state`<sp/>state<sp/>of<sp/>[NFA](#classpractice1_1_1nfa_1_1NFA)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`letter`<sp/>letter<sp/>from<sp/>preset<sp/>alphabet<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Returns</highlight></codeline>
<codeline><highlight class="normal">True<sp/>if<sp/>ways<sp/>exist<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Returns</highlight></codeline>
<codeline><highlight class="normal">False<sp/>if<sp/>ways<sp/>don&apos;t<sp/>exist</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>class<sp/>`practice1::nfa::_CreateNFA`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Functor<sp/>for<sp/>creating<sp/>[NFA](#classpractice1_1_1nfa_1_1NFA).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Summary</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Members<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Descriptions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">--------------------------------|---------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">`public<sp/><sp/>`[`nodes`](#classpractice1_1_1nfa_1_1__CreateNFA_1a6da5270e48c8b5c2f0dbaa008af4df76)<sp/>|<sp/></highlight></codeline>
<codeline><highlight class="normal">`public<sp/><sp/>`[`stack`](#classpractice1_1_1nfa_1_1__CreateNFA_1a37d7c639a3adefa88200027e9f78ba3f)<sp/>|<sp/></highlight></codeline>
<codeline><highlight class="normal">`public<sp/>def<sp/>`[`__init__`](#classpractice1_1_1nfa_1_1__CreateNFA_1a62d114c8017936187a4b318c581e0bb3)`(self,reg_exp)`<sp/>|<sp/></highlight></codeline>
<codeline><highlight class="normal">`public<sp/>def<sp/>`[`reg_concatenation`](#classpractice1_1_1nfa_1_1__CreateNFA_1a5c3712c31bdf8318bd4b732d4e99014b)`(self)`<sp/>|<sp/>Regex<sp/>concatenation<sp/>This<sp/>method<sp/>takes<sp/>the<sp/>last<sp/>two<sp/>elements<sp/>in<sp/>stack<sp/>and<sp/>concatenates.</highlight></codeline>
<codeline><highlight class="normal">`public<sp/>def<sp/>`[`reg_iteration`](#classpractice1_1_1nfa_1_1__CreateNFA_1a377c78827ef6e6c6bfa1e88c880b6882)`(self)`<sp/>|<sp/>Regex<sp/>iteration<sp/>This<sp/>method<sp/>takes<sp/>the<sp/>last<sp/>element<sp/>and<sp/>applies<sp/>the<sp/>Kleene<sp/>star.</highlight></codeline>
<codeline><highlight class="normal">`public<sp/>def<sp/>`[`reg_or`](#classpractice1_1_1nfa_1_1__CreateNFA_1a57eb512c08bd3207c3a41667f054dc65)`(self)`<sp/>|<sp/>boolean<sp/>&apos;or&apos;<sp/>for<sp/>regular<sp/>expressions<sp/>This<sp/>method<sp/>takes<sp/>the<sp/>last<sp/>two<sp/>elements<sp/>in<sp/>stack<sp/>and<sp/>forks<sp/>them<sp/>into<sp/>one<sp/>block<sp/>with<sp/>the<sp/>help<sp/>of<sp/>two<sp/>additional<sp/>states.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Members</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/><sp/>`[`nodes`](#classpractice1_1_1nfa_1_1__CreateNFA_1a6da5270e48c8b5c2f0dbaa008af4df76)<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/><sp/>`[`stack`](#classpractice1_1_1nfa_1_1__CreateNFA_1a37d7c639a3adefa88200027e9f78ba3f)<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/>def<sp/>`[`__init__`](#classpractice1_1_1nfa_1_1__CreateNFA_1a62d114c8017936187a4b318c581e0bb3)`(self,reg_exp)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/>def<sp/>`[`reg_concatenation`](#classpractice1_1_1nfa_1_1__CreateNFA_1a5c3712c31bdf8318bd4b732d4e99014b)`(self)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Regex<sp/>concatenation<sp/>This<sp/>method<sp/>takes<sp/>the<sp/>last<sp/>two<sp/>elements<sp/>in<sp/>stack<sp/>and<sp/>concatenates.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/>def<sp/>`[`reg_iteration`](#classpractice1_1_1nfa_1_1__CreateNFA_1a377c78827ef6e6c6bfa1e88c880b6882)`(self)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Regex<sp/>iteration<sp/>This<sp/>method<sp/>takes<sp/>the<sp/>last<sp/>element<sp/>and<sp/>applies<sp/>the<sp/>Kleene<sp/>star.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/>def<sp/>`[`reg_or`](#classpractice1_1_1nfa_1_1__CreateNFA_1a57eb512c08bd3207c3a41667f054dc65)`(self)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">boolean<sp/>&apos;or&apos;<sp/>for<sp/>regular<sp/>expressions<sp/>This<sp/>method<sp/>takes<sp/>the<sp/>last<sp/>two<sp/>elements<sp/>in<sp/>stack<sp/>and<sp/>forks<sp/>them<sp/>into<sp/>one<sp/>block<sp/>with<sp/>the<sp/>help<sp/>of<sp/>two<sp/>additional<sp/>states.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>class<sp/>`practice1::nfa::_Node`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Section:<sp/>Working<sp/>with<sp/>states<sp/>of<sp/>[NFA](#classpractice1_1_1nfa_1_1NFA).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Node<sp/>-<sp/>state<sp/>of<sp/>NKA</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Summary</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Members<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Descriptions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">--------------------------------|---------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">`public<sp/><sp/>`[`final`](#classpractice1_1_1nfa_1_1__Node_1a46a85338742bf5c446ee7a462d658889)<sp/>|<sp/></highlight></codeline>
<codeline><highlight class="normal">`public<sp/>def<sp/>`[`__init__`](#classpractice1_1_1nfa_1_1__Node_1ae8d7d57832bfb87f45bdc9b6e8bfc030)`(self,`[`transitions`](#classpractice1_1_1nfa_1_1__Node_1a2594171e7c2a90ab61e43e1bc68adaf7)`,`[`final`](#classpractice1_1_1nfa_1_1__Node_1af28a838c358ed1f4ae4ebd0b702ea078)`)`<sp/>|<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Members</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/><sp/>`[`final`](#classpractice1_1_1nfa_1_1__Node_1a46a85338742bf5c446ee7a462d658889)<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/>def<sp/>`[`__init__`](#classpractice1_1_1nfa_1_1__Node_1ae8d7d57832bfb87f45bdc9b6e8bfc030)`(self,`[`transitions`](#classpractice1_1_1nfa_1_1__Node_1a2594171e7c2a90ab61e43e1bc68adaf7)`,`[`final`](#classpractice1_1_1nfa_1_1__Node_1af28a838c358ed1f4ae4ebd0b702ea078)`)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>class<sp/>`practice1::nfa::NFA`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Section:<sp/>Working<sp/>with<sp/>[NFA](#classpractice1_1_1nfa_1_1NFA).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Nondeterministic<sp/>finite<sp/>automaton<sp/>It<sp/>consists<sp/>of<sp/>a<sp/>list<sp/>of<sp/>states,<sp/>in<sp/>which,<sp/>inside<sp/>each<sp/>state,<sp/>all<sp/>possible<sp/>transitions<sp/>to<sp/>other<sp/>states<sp/>are<sp/>stored,<sp/>allowed<sp/>by<sp/>a<sp/>regular<sp/>expression<sp/>specified<sp/>by<sp/>the<sp/>user<sp/>in<sp/>reverse<sp/>Polish<sp/>notation.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Summary</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Members<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Descriptions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">--------------------------------|---------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">`public<sp/><sp/>`[`nodes`](#classpractice1_1_1nfa_1_1NFA_1a6da5270e48c8b5c2f0dbaa008af4df76)<sp/>|<sp/></highlight></codeline>
<codeline><highlight class="normal">`public<sp/><sp/>`[`state`](#classpractice1_1_1nfa_1_1NFA_1adc6e5733fc3c22f0a7b2914188c49c90)<sp/>|<sp/></highlight></codeline>
<codeline><highlight class="normal">`public<sp/>def<sp/>`[`__init__`](#classpractice1_1_1nfa_1_1NFA_1a1be0698cef9313432d31dd5028cd7654)`(self,str<sp/>reg_exp)`<sp/>|<sp/>Initialize<sp/>method<sp/>from<sp/>a<sp/>regExp<sp/>in<sp/>reverse<sp/>Polish<sp/>notation.</highlight></codeline>
<codeline><highlight class="normal">`public<sp/>bool<sp/>`[`read`](#classpractice1_1_1nfa_1_1NFA_1a42f933055dd9fadc2a95f6f3484dc096)`(self,str<sp/>string)`<sp/>|<sp/>Answers<sp/>the<sp/>question<sp/>whether<sp/>the<sp/>string<sp/>can<sp/>be<sp/>read<sp/>by<sp/>the<sp/>[NFA](#classpractice1_1_1nfa_1_1NFA)<sp/>This<sp/>method<sp/>uses<sp/>the<sp/>breadth-first<sp/>search<sp/>algorithm.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Members</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/><sp/>`[`nodes`](#classpractice1_1_1nfa_1_1NFA_1a6da5270e48c8b5c2f0dbaa008af4df76)<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/><sp/>`[`state`](#classpractice1_1_1nfa_1_1NFA_1adc6e5733fc3c22f0a7b2914188c49c90)<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/>def<sp/>`[`__init__`](#classpractice1_1_1nfa_1_1NFA_1a1be0698cef9313432d31dd5028cd7654)`(self,str<sp/>reg_exp)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Initialize<sp/>method<sp/>from<sp/>a<sp/>regExp<sp/>in<sp/>reverse<sp/>Polish<sp/>notation.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Parameters</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`reg_exp`<sp/>regular<sp/>expression<sp/>given<sp/>in<sp/>reverse<sp/>Polish<sp/>notation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>`public<sp/>bool<sp/>`[`read`](#classpractice1_1_1nfa_1_1NFA_1a42f933055dd9fadc2a95f6f3484dc096)`(self,str<sp/>string)`<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Answers<sp/>the<sp/>question<sp/>whether<sp/>the<sp/>string<sp/>can<sp/>be<sp/>read<sp/>by<sp/>the<sp/>[NFA](#classpractice1_1_1nfa_1_1NFA)<sp/>This<sp/>method<sp/>uses<sp/>the<sp/>breadth-first<sp/>search<sp/>algorithm.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Parameters</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`string`<sp/>the<sp/>string<sp/>passed<sp/>by<sp/>the<sp/>user<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Returns</highlight></codeline>
<codeline><highlight class="normal">True<sp/>if<sp/>the<sp/>string<sp/>can<sp/>be<sp/>read<sp/>by<sp/>an<sp/>automaton<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Returns</highlight></codeline>
<codeline><highlight class="normal">False<sp/>if<sp/>the<sp/>string<sp/>can&apos;t<sp/>be<sp/>read<sp/>by<sp/>an<sp/>automaton</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Generated<sp/>by<sp/>[Moxygen](https://sourcey.com/moxygen)</highlight></codeline>
    </programlisting>
    <location file="api.md"/>
  </compounddef>
</doxygen>
