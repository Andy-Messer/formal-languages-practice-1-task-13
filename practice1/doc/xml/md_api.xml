<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md_api" kind="page">
    <compoundname>md_api</compoundname>
    <title>Summary</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para>Members </para>
</entry><entry thead="yes"><para>Descriptions  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>namespace</computeroutput><ulink url="#namespacepractice1"><computeroutput>practice1</computeroutput></ulink> </para>
</entry><entry thead="no"><para>Python Library - Solve for homework: &apos;Formal Languages, Practice 1, task 13&apos;.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>namespace</computeroutput><ulink url="#namespacepractice1_1_1dump"><computeroutput>practice1::dump</computeroutput></ulink> </para>
</entry><entry thead="no"><para>module - Dump utility of NFA.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>namespace</computeroutput><ulink url="#namespacepractice1_1_1nfa"><computeroutput>practice1::nfa</computeroutput></ulink> </para>
</entry><entry thead="no"><para>module - Implementation of <ulink url="#classpractice1_1_1nfa_1_1NFA">NFA</ulink>.  </para>
</entry></row>
</table>
</para>
<sect1 id="md_api_1autotoc_md1">
<title>namespace &lt;tt&gt;practice1&lt;/tt&gt;</title>
<para>Python Library - Solve for homework: &apos;Formal Languages, Practice 1, task 13&apos;.</para>
<sect2 id="md_api_1autotoc_md2">
<title>Summary</title>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>Members </para>
</entry><entry thead="yes"><para>Descriptions  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>public def</computeroutput><ulink url="#namespacepractice1_1a4f1e2327621575169836b24fad1c4cc0"><computeroutput>solve</computeroutput></ulink><computeroutput>(istream,ostream)</computeroutput> </para>
</entry><entry thead="no"><para>Solution for the task.  </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="md_api_1autotoc_md3">
<title>Members</title>
<sect4 id="md_api_1autotoc_md4">
<title>&lt;tt&gt;public def&lt;/tt&gt;&lt;a href=&quot;#namespacepractice1_1a4f1e2327621575169836b24fad1c4cc0&quot;&gt;&lt;tt&gt;solve&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(istream,ostream)&lt;/tt&gt;</title>
<para>Solution for the task.</para>
<para>Корректность: воспользуемся тем, что любая регулярка задаёт НКА. А значит если подслово может быть прочитано НКА, то оно принадлежит установленному языку. Более точно, переберем все подстроки данной нам строки и попытаемся их прочитать, длина наибольшей прочитанной строки будет ответом. Верность построения НКА доказывается самим алгоритмом построения.</para>
</sect4>
</sect2>
</sect1>
<sect1 id="md_api_1autotoc_md5">
<title>namespace &lt;tt&gt;practice1::dump&lt;/tt&gt;</title>
<para>module - Dump utility of NFA.</para>
<sect2 id="md_api_1autotoc_md6">
<title>Summary</title>
<para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public def</computeroutput><ulink url="#namespacepractice1_1_1dump_1ad9f715f29da831aa7643c91af5ebe458"><computeroutput>__dump__</computeroutput></ulink><computeroutput>(nfa,filename)</computeroutput> | <computeroutput>private def</computeroutput><ulink url="#namespacepractice1_1_1dump_1a48a26379315f5034651c9f7bb9bb4fe5"><computeroutput>__get_transitions_count</computeroutput></ulink><computeroutput>(node)</computeroutput> | Counts the number of possible transitions. <computeroutput>public def</computeroutput><ulink url="#namespacepractice1_1_1dump_1ab26a8f699adf1b51bbb17f5d6b0f5286"><computeroutput>__print__</computeroutput></ulink><computeroutput>(nfa)</computeroutput> | Dump NFA. <computeroutput>public def</computeroutput><ulink url="#namespacepractice1_1_1dump_1ae6922a078c8fb18193cfe597b9590312"><computeroutput>__print_brief__</computeroutput></ulink><computeroutput>(node)</computeroutput> | Print a summary of the NFA node. <computeroutput>public def</computeroutput><ulink url="#namespacepractice1_1_1dump_1ade4c74aabe15dae245a2b47484ca9612"><computeroutput>__print_node__</computeroutput></ulink><computeroutput>(node)</computeroutput> | Printing node of NFA. <computeroutput>private def</computeroutput><ulink url="#namespacepractice1_1_1dump_1a99dcf84e0b8fa8cb8f8c888ffc8f198f"><computeroutput>_tree_remove</computeroutput></ulink><computeroutput>(str top)</computeroutput> | Removes all files in the current directory. <computeroutput>public str</computeroutput><ulink url="#namespacepractice1_1_1dump_1a8d3277da1b00286352f693cdb9c011a0"><computeroutput>make_new_state</computeroutput></ulink><computeroutput>(node)</computeroutput> | Generate new name for id(node) in format: f&apos;q + {id}&apos;.</para>
</sect2>
<sect2 id="md_api_1autotoc_md7">
<title>Members</title>
<sect4 id="md_api_1autotoc_md8">
<title>&lt;tt&gt;public def&lt;/tt&gt;&lt;a href=&quot;#namespacepractice1_1_1dump_1ad9f715f29da831aa7643c91af5ebe458&quot;&gt;&lt;tt&gt;__dump__&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(nfa,filename)&lt;/tt&gt;</title>
</sect4>
<sect4 id="md_api_1autotoc_md9">
<title>&lt;tt&gt;private def&lt;/tt&gt;&lt;a href=&quot;#namespacepractice1_1_1dump_1a48a26379315f5034651c9f7bb9bb4fe5&quot;&gt;&lt;tt&gt;__get_transitions_count&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(node)&lt;/tt&gt;</title>
<para>Counts the number of possible transitions.</para>
</sect4>
<sect4 id="md_api_1autotoc_md10">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>node</computeroutput> node that number of transitions is being searched for</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md11">
<title>Returns</title>
<para>count: number of transitions</para>
</sect4>
<sect4 id="md_api_1autotoc_md12">
<title>&lt;tt&gt;public def&lt;/tt&gt;&lt;a href=&quot;#namespacepractice1_1_1dump_1ab26a8f699adf1b51bbb17f5d6b0f5286&quot;&gt;&lt;tt&gt;__print__&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(nfa)&lt;/tt&gt;</title>
<para>Dump NFA.</para>
<para>Make notes about nodes and their connections </para>
</sect4>
<sect4 id="md_api_1autotoc_md13">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>nfa</computeroutput> nondeterministic finite automaton that need to be print</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md14">
<title>&lt;tt&gt;public def&lt;/tt&gt;&lt;a href=&quot;#namespacepractice1_1_1dump_1ae6922a078c8fb18193cfe597b9590312&quot;&gt;&lt;tt&gt;__print_brief__&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(node)&lt;/tt&gt;</title>
<para>Print a summary of the NFA node.</para>
<para>Short output format: &apos;node.name node.final&apos; </para>
</sect4>
<sect4 id="md_api_1autotoc_md15">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>node</computeroutput> node the debugrmation about which should be output</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md16">
<title>&lt;tt&gt;public def&lt;/tt&gt;&lt;a href=&quot;#namespacepractice1_1_1dump_1ade4c74aabe15dae245a2b47484ca9612&quot;&gt;&lt;tt&gt;__print_node__&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(node)&lt;/tt&gt;</title>
<para>Printing node of NFA.</para>
<para>Output the name of the node, its final and a list of neighbors with their number </para>
</sect4>
<sect4 id="md_api_1autotoc_md17">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>node</computeroutput> printing node</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md18">
<title>&lt;tt&gt;private def&lt;/tt&gt;&lt;a href=&quot;#namespacepractice1_1_1dump_1a99dcf84e0b8fa8cb8f8c888ffc8f198f&quot;&gt;&lt;tt&gt;_tree_remove&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(str top)&lt;/tt&gt;</title>
<para>Removes all files in the current directory.</para>
</sect4>
<sect4 id="md_api_1autotoc_md19">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>top</computeroutput> Name of initial directory.</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md20">
<title>&lt;tt&gt;public str&lt;/tt&gt;&lt;a href=&quot;#namespacepractice1_1_1dump_1a8d3277da1b00286352f693cdb9c011a0&quot;&gt;&lt;tt&gt;make_new_state&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(node)&lt;/tt&gt;</title>
<para>Generate new name for id(node) in format: f&apos;q + {id}&apos;.</para>
</sect4>
<sect4 id="md_api_1autotoc_md21">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>node</computeroutput> node</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md22">
<title>Returns</title>
<para>name: new name of node</para>
</sect4>
</sect2>
</sect1>
<sect1 id="md_api_1autotoc_md23">
<title>namespace &lt;tt&gt;practice1::nfa&lt;/tt&gt;</title>
<para>module - Implementation of <ulink url="#classpractice1_1_1nfa_1_1NFA">NFA</ulink>.</para>
<sect2 id="md_api_1autotoc_md24">
<title>Summary</title>
<para><table rows="7" cols="2"><row>
<entry thead="yes"><para>Members </para>
</entry><entry thead="yes"><para>Descriptions  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>private list</computeroutput><ulink url="#namespacepractice1_1_1nfa_1a4d9a2e5db8da6340541e17cde0bc5680"><computeroutput>_get_ways</computeroutput></ulink><computeroutput>(</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__Node"><computeroutput>_Node</computeroutput></ulink><computeroutput>state,str letter)</computeroutput> </para>
</entry><entry thead="no"><para>Returns a list of states that can be entered by a given letter.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>private bool</computeroutput><ulink url="#namespacepractice1_1_1nfa_1a12e43040f4837c23c481fc929939fed5"><computeroutput>_is_letter</computeroutput></ulink><computeroutput>(str symbol)</computeroutput> </para>
</entry><entry thead="no"><para>Checks for the presence of a character in the alphabet.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>private bool</computeroutput><ulink url="#namespacepractice1_1_1nfa_1a44b82383fce3d09db5a6b4ee9e553c6b"><computeroutput>_is_way_to</computeroutput></ulink><computeroutput>(</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__Node"><computeroutput>_Node</computeroutput></ulink><computeroutput>state,str letter)</computeroutput> </para>
</entry><entry thead="no"><para>Checks for the presence letter in possible transitions.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>class</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__CreateNFA"><computeroutput>practice1::nfa::_CreateNFA</computeroutput></ulink> </para>
</entry><entry thead="no"><para>Functor for creating <ulink url="#classpractice1_1_1nfa_1_1NFA">NFA</ulink>.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>class</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__Node"><computeroutput>practice1::nfa::_Node</computeroutput></ulink> </para>
</entry><entry thead="no"><para>Section: Working with states of <ulink url="#classpractice1_1_1nfa_1_1NFA">NFA</ulink>.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>class</computeroutput><ulink url="#classpractice1_1_1nfa_1_1NFA"><computeroutput>practice1::nfa::NFA</computeroutput></ulink> </para>
</entry><entry thead="no"><para>Section: Working with <ulink url="#classpractice1_1_1nfa_1_1NFA">NFA</ulink>.  </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="md_api_1autotoc_md25">
<title>Members</title>
<sect4 id="md_api_1autotoc_md26">
<title>&lt;tt&gt;private list&lt;/tt&gt;&lt;a href=&quot;#namespacepractice1_1_1nfa_1a4d9a2e5db8da6340541e17cde0bc5680&quot;&gt;&lt;tt&gt;_get_ways&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1__Node&quot;&gt;&lt;tt&gt;_Node&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;state,str letter)&lt;/tt&gt;</title>
<para>Returns a list of states that can be entered by a given letter.</para>
</sect4>
<sect4 id="md_api_1autotoc_md27">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>state</computeroutput> state of <ulink url="#classpractice1_1_1nfa_1_1NFA">NFA</ulink></para>
</listitem><listitem><para><computeroutput>letter</computeroutput> letter from preset alphabet</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md28">
<title>Returns</title>
<para>list list of states that can be entered by a given letter</para>
</sect4>
<sect4 id="md_api_1autotoc_md29">
<title>&lt;tt&gt;private bool&lt;/tt&gt;&lt;a href=&quot;#namespacepractice1_1_1nfa_1a12e43040f4837c23c481fc929939fed5&quot;&gt;&lt;tt&gt;_is_letter&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(str symbol)&lt;/tt&gt;</title>
<para>Checks for the presence of a character in the alphabet.</para>
</sect4>
<sect4 id="md_api_1autotoc_md30">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>symbol</computeroutput> user-supplied character</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md31">
<title>Returns</title>
<para>True if symbol in alphabet</para>
</sect4>
<sect4 id="md_api_1autotoc_md32">
<title>Returns</title>
<para>False if symbol not in alphabet</para>
</sect4>
<sect4 id="md_api_1autotoc_md33">
<title>&lt;tt&gt;private bool&lt;/tt&gt;&lt;a href=&quot;#namespacepractice1_1_1nfa_1a44b82383fce3d09db5a6b4ee9e553c6b&quot;&gt;&lt;tt&gt;_is_way_to&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1__Node&quot;&gt;&lt;tt&gt;_Node&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;state,str letter)&lt;/tt&gt;</title>
<para>Checks for the presence letter in possible transitions.</para>
</sect4>
<sect4 id="md_api_1autotoc_md34">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>state</computeroutput> state of <ulink url="#classpractice1_1_1nfa_1_1NFA">NFA</ulink></para>
</listitem><listitem><para><computeroutput>letter</computeroutput> letter from preset alphabet</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md35">
<title>Returns</title>
<para>True if ways exist</para>
</sect4>
<sect4 id="md_api_1autotoc_md36">
<title>Returns</title>
<para>False if ways don&apos;t exist</para>
</sect4>
</sect2>
</sect1>
<sect1 id="md_api_1autotoc_md37">
<title>class &lt;tt&gt;practice1::nfa::_CreateNFA&lt;/tt&gt;</title>
<para>Functor for creating <ulink url="#classpractice1_1_1nfa_1_1NFA">NFA</ulink>.</para>
<sect2 id="md_api_1autotoc_md38">
<title>Summary</title>
<para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__CreateNFA_1a6da5270e48c8b5c2f0dbaa008af4df76"><computeroutput>nodes</computeroutput></ulink> | <computeroutput>public</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__CreateNFA_1a37d7c639a3adefa88200027e9f78ba3f"><computeroutput>stack</computeroutput></ulink> | <computeroutput>public def</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__CreateNFA_1a62d114c8017936187a4b318c581e0bb3"><computeroutput>__init__</computeroutput></ulink><computeroutput>(self,reg_exp)</computeroutput> | <computeroutput>public def</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__CreateNFA_1a5c3712c31bdf8318bd4b732d4e99014b"><computeroutput>reg_concatenation</computeroutput></ulink><computeroutput>(self)</computeroutput> | Regex concatenation This method takes the last two elements in stack and concatenates. <computeroutput>public def</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__CreateNFA_1a377c78827ef6e6c6bfa1e88c880b6882"><computeroutput>reg_iteration</computeroutput></ulink><computeroutput>(self)</computeroutput> | Regex iteration This method takes the last element and applies the Kleene star. <computeroutput>public def</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__CreateNFA_1a57eb512c08bd3207c3a41667f054dc65"><computeroutput>reg_or</computeroutput></ulink><computeroutput>(self)</computeroutput> | boolean &apos;or&apos; for regular expressions This method takes the last two elements in stack and forks them into one block with the help of two additional states.</para>
</sect2>
<sect2 id="md_api_1autotoc_md39">
<title>Members</title>
<sect4 id="md_api_1autotoc_md40">
<title>&lt;tt&gt;public&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1__CreateNFA_1a6da5270e48c8b5c2f0dbaa008af4df76&quot;&gt;&lt;tt&gt;nodes&lt;/tt&gt;&lt;/a&gt;</title>
</sect4>
<sect4 id="md_api_1autotoc_md41">
<title>&lt;tt&gt;public&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1__CreateNFA_1a37d7c639a3adefa88200027e9f78ba3f&quot;&gt;&lt;tt&gt;stack&lt;/tt&gt;&lt;/a&gt;</title>
</sect4>
<sect4 id="md_api_1autotoc_md42">
<title>&lt;tt&gt;public def&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1__CreateNFA_1a62d114c8017936187a4b318c581e0bb3&quot;&gt;&lt;tt&gt;__init__&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(self,reg_exp)&lt;/tt&gt;</title>
</sect4>
<sect4 id="md_api_1autotoc_md43">
<title>&lt;tt&gt;public def&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1__CreateNFA_1a5c3712c31bdf8318bd4b732d4e99014b&quot;&gt;&lt;tt&gt;reg_concatenation&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(self)&lt;/tt&gt;</title>
<para>Regex concatenation This method takes the last two elements in stack and concatenates.</para>
</sect4>
<sect4 id="md_api_1autotoc_md44">
<title>&lt;tt&gt;public def&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1__CreateNFA_1a377c78827ef6e6c6bfa1e88c880b6882&quot;&gt;&lt;tt&gt;reg_iteration&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(self)&lt;/tt&gt;</title>
<para>Regex iteration This method takes the last element and applies the Kleene star.</para>
</sect4>
<sect4 id="md_api_1autotoc_md45">
<title>&lt;tt&gt;public def&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1__CreateNFA_1a57eb512c08bd3207c3a41667f054dc65&quot;&gt;&lt;tt&gt;reg_or&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(self)&lt;/tt&gt;</title>
<para>boolean &apos;or&apos; for regular expressions This method takes the last two elements in stack and forks them into one block with the help of two additional states.</para>
</sect4>
</sect2>
</sect1>
<sect1 id="md_api_1autotoc_md46">
<title>class &lt;tt&gt;practice1::nfa::_Node&lt;/tt&gt;</title>
<para>Section: Working with states of <ulink url="#classpractice1_1_1nfa_1_1NFA">NFA</ulink>.</para>
<para>Node - state of NKA</para>
<sect2 id="md_api_1autotoc_md47">
<title>Summary</title>
<para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__Node_1a46a85338742bf5c446ee7a462d658889"><computeroutput>final</computeroutput></ulink> | <computeroutput>public def</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__Node_1ae8d7d57832bfb87f45bdc9b6e8bfc030"><computeroutput>__init__</computeroutput></ulink><computeroutput>(self,</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__Node_1a2594171e7c2a90ab61e43e1bc68adaf7"><computeroutput>transitions</computeroutput></ulink><computeroutput>,</computeroutput><ulink url="#classpractice1_1_1nfa_1_1__Node_1af28a838c358ed1f4ae4ebd0b702ea078"><computeroutput>final</computeroutput></ulink><computeroutput>)</computeroutput> |</para>
</sect2>
<sect2 id="md_api_1autotoc_md48">
<title>Members</title>
<sect4 id="md_api_1autotoc_md49">
<title>&lt;tt&gt;public&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1__Node_1a46a85338742bf5c446ee7a462d658889&quot;&gt;&lt;tt&gt;final&lt;/tt&gt;&lt;/a&gt;</title>
</sect4>
<sect4 id="md_api_1autotoc_md50">
<title>&lt;tt&gt;public def&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1__Node_1ae8d7d57832bfb87f45bdc9b6e8bfc030&quot;&gt;&lt;tt&gt;__init__&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(self,&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1__Node_1a2594171e7c2a90ab61e43e1bc68adaf7&quot;&gt;&lt;tt&gt;transitions&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;,&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1__Node_1af28a838c358ed1f4ae4ebd0b702ea078&quot;&gt;&lt;tt&gt;final&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;)&lt;/tt&gt;</title>
</sect4>
</sect2>
</sect1>
<sect1 id="md_api_1autotoc_md51">
<title>class &lt;tt&gt;practice1::nfa::NFA&lt;/tt&gt;</title>
<para>Section: Working with <ulink url="#classpractice1_1_1nfa_1_1NFA">NFA</ulink>.</para>
<para>Nondeterministic finite automaton It consists of a list of states, in which, inside each state, all possible transitions to other states are stored, allowed by a regular expression specified by the user in reverse Polish notation.</para>
<sect2 id="md_api_1autotoc_md52">
<title>Summary</title>
<para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public</computeroutput><ulink url="#classpractice1_1_1nfa_1_1NFA_1a6da5270e48c8b5c2f0dbaa008af4df76"><computeroutput>nodes</computeroutput></ulink> | <computeroutput>public</computeroutput><ulink url="#classpractice1_1_1nfa_1_1NFA_1adc6e5733fc3c22f0a7b2914188c49c90"><computeroutput>state</computeroutput></ulink> | <computeroutput>public def</computeroutput><ulink url="#classpractice1_1_1nfa_1_1NFA_1a1be0698cef9313432d31dd5028cd7654"><computeroutput>__init__</computeroutput></ulink><computeroutput>(self,str reg_exp)</computeroutput> | Initialize method from a regExp in reverse Polish notation. <computeroutput>public bool</computeroutput><ulink url="#classpractice1_1_1nfa_1_1NFA_1a42f933055dd9fadc2a95f6f3484dc096"><computeroutput>read</computeroutput></ulink><computeroutput>(self,str string)</computeroutput> | Answers the question whether the string can be read by the <ulink url="#classpractice1_1_1nfa_1_1NFA">NFA</ulink> This method uses the breadth-first search algorithm.</para>
</sect2>
<sect2 id="md_api_1autotoc_md53">
<title>Members</title>
<sect4 id="md_api_1autotoc_md54">
<title>&lt;tt&gt;public&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1NFA_1a6da5270e48c8b5c2f0dbaa008af4df76&quot;&gt;&lt;tt&gt;nodes&lt;/tt&gt;&lt;/a&gt;</title>
</sect4>
<sect4 id="md_api_1autotoc_md55">
<title>&lt;tt&gt;public&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1NFA_1adc6e5733fc3c22f0a7b2914188c49c90&quot;&gt;&lt;tt&gt;state&lt;/tt&gt;&lt;/a&gt;</title>
</sect4>
<sect4 id="md_api_1autotoc_md56">
<title>&lt;tt&gt;public def&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1NFA_1a1be0698cef9313432d31dd5028cd7654&quot;&gt;&lt;tt&gt;__init__&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(self,str reg_exp)&lt;/tt&gt;</title>
<para>Initialize method from a regExp in reverse Polish notation.</para>
</sect4>
<sect4 id="md_api_1autotoc_md57">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>reg_exp</computeroutput> regular expression given in reverse Polish notation</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md58">
<title>&lt;tt&gt;public bool&lt;/tt&gt;&lt;a href=&quot;#classpractice1_1_1nfa_1_1NFA_1a42f933055dd9fadc2a95f6f3484dc096&quot;&gt;&lt;tt&gt;read&lt;/tt&gt;&lt;/a&gt;&lt;tt&gt;(self,str string)&lt;/tt&gt;</title>
<para>Answers the question whether the string can be read by the <ulink url="#classpractice1_1_1nfa_1_1NFA">NFA</ulink> This method uses the breadth-first search algorithm.</para>
</sect4>
<sect4 id="md_api_1autotoc_md59">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>string</computeroutput> the string passed by the user</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md60">
<title>Returns</title>
<para>True if the string can be read by an automaton</para>
</sect4>
<sect4 id="md_api_1autotoc_md61">
<title>Returns</title>
<para>False if the string can&apos;t be read by an automaton</para>
<para>Generated by <ulink url="https://sourcey.com/moxygen">Moxygen</ulink> </para>
</sect4>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
