<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceFormalLangPractice1task13_1_1nfa" kind="namespace" language="Python">
    <compoundname>FormalLangPractice1task13::nfa</compoundname>
    <innerclass refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA" prot="public">FormalLangPractice1task13::nfa::_CreateNFA</innerclass>
    <innerclass refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" prot="public">FormalLangPractice1task13::nfa::_Node</innerclass>
    <innerclass refid="classFormalLangPractice1task13_1_1nfa_1_1NFA" prot="public">FormalLangPractice1task13::nfa::NFA</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceFormalLangPractice1task13_1_1nfa_1a04b29073595dc5461c193ae3575fe1cd" prot="private" static="no" mutable="no">
        <type>list</type>
        <definition>list __alphabet_of_letters</definition>
        <argsstring></argsstring>
        <name>__alphabet_of_letters</name>
        <initializer>=  [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="38" column="1" bodyfile="nfa.py" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceFormalLangPractice1task13_1_1nfa_1ab4788c415ce7ca6efbefe80eca90cba7" prot="private" static="no" mutable="no">
        <type>list</type>
        <definition>list __alphabet_of_operators</definition>
        <argsstring></argsstring>
        <name>__alphabet_of_operators</name>
        <initializer>=  [&apos;*&apos;, &apos;+&apos;, &apos;.&apos;]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="37" column="1" bodyfile="nfa.py" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceFormalLangPractice1task13_1_1nfa_1aca23e1128e4dc5eba47ef5088ba933fb" prot="public" static="no" mutable="no">
        <type></type>
        <definition>config_dict</definition>
        <argsstring></argsstring>
        <name>config_dict</name>
        <initializer>=  json.load(logging_configuration_file)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="32" column="1" bodyfile="nfa.py" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceFormalLangPractice1task13_1_1nfa_1a72d7acfb55cee262f711b476ccc62a21" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>list</type>
        <definition> list FormalLangPractice1task13.nfa._get_ways</definition>
        <argsstring>(_Node state, str letter)</argsstring>
        <name>_get_ways</name>
        <param>
          <type><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" kindref="compound">_Node</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>str</type>
          <declname>letter</declname>
        </param>
        <briefdescription>
<para>Returns a list of states that can be entered by a given letter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>state of <ref refid="classFormalLangPractice1task13_1_1nfa_1_1NFA" kindref="compound">NFA</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>letter</parametername>
</parameternamelist>
<parameterdescription>
<para>letter from preset alphabet </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>list list of states that can be entered by a given letter </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="81" column="1" bodyfile="nfa.py" bodystart="81" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFormalLangPractice1task13_1_1nfa_1a79b03dc91927f5d8a7a7b578a3693f4f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition> bool FormalLangPractice1task13.nfa._is_letter</definition>
        <argsstring>(str symbol)</argsstring>
        <name>_is_letter</name>
        <param>
          <type>str</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
<para>Checks for the presence of a character in the alphabet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if symbol in alphabet </para>
</simplesect>
<simplesect kind="return"><para>False if symbol not in alphabet </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="41" column="1" bodyfile="nfa.py" bodystart="41" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFormalLangPractice1task13_1_1nfa_1a3515f301665012841b004380bd49e2ea" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition> bool FormalLangPractice1task13.nfa._is_way_to</definition>
        <argsstring>(_Node state, str letter)</argsstring>
        <name>_is_way_to</name>
        <param>
          <type><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" kindref="compound">_Node</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>str</type>
          <declname>letter</declname>
        </param>
        <briefdescription>
<para>Checks for the presence letter in possible transitions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>state of <ref refid="classFormalLangPractice1task13_1_1nfa_1_1NFA" kindref="compound">NFA</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>letter</parametername>
</parameternamelist>
<parameterdescription>
<para>letter from preset alphabet </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if ways exist </para>
</simplesect>
<simplesect kind="return"><para>False if ways don&apos;t exist </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="68" column="1" bodyfile="nfa.py" bodystart="68" bodyend="80"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Python Library to solve homework: &apos;Formal Languages, Practice 1, task 13&apos;. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="nfa.py" line="1" column="1"/>
  </compounddef>
</doxygen>
