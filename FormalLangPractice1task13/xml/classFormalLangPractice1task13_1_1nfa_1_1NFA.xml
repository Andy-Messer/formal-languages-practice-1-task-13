<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classFormalLangPractice1task13_1_1nfa_1_1NFA" kind="class" language="Python" prot="public">
    <compoundname>FormalLangPractice1task13::nfa::NFA</compoundname>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a46a85338742bf5c446ee7a462d658889" prot="public" static="yes" mutable="no">
        <type></type>
        <definition>final</definition>
        <argsstring></argsstring>
        <name>final</name>
        <initializer>=  <ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" kindref="compound">_Node</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="107" column="1" bodyfile="nfa.py" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a8d0dd69a20182cd1647f229af000cfa5" prot="public" static="yes" mutable="no">
        <type></type>
        <definition>initial</definition>
        <argsstring></argsstring>
        <name>initial</name>
        <initializer>=  <ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" kindref="compound">_Node</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="103" column="1" bodyfile="nfa.py" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a7d3a7a8f8b193c3a91a80dac71dcb75c" prot="public" static="yes" mutable="no">
        <type>list</type>
        <definition>list nodes</definition>
        <argsstring></argsstring>
        <name>nodes</name>
        <initializer>=  []</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="105" column="1" bodyfile="nfa.py" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a6da5270e48c8b5c2f0dbaa008af4df76" prot="public" static="no" mutable="no">
        <type></type>
        <definition>nodes</definition>
        <argsstring></argsstring>
        <name>nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="118" column="1" bodyfile="nfa.py" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classFormalLangPractice1task13_1_1nfa_1_1NFA_1adc6e5733fc3c22f0a7b2914188c49c90" prot="public" static="no" mutable="no">
        <type></type>
        <definition>state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="120" column="1" bodyfile="nfa.py" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a1be0698cef9313432d31dd5028cd7654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def __init__</definition>
        <argsstring>(self, str reg_exp=None)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>str</type>
          <declname>reg_exp</declname>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Initialize method from a regExp in reverse Polish notation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg_exp</parametername>
</parameternamelist>
<parameterdescription>
<para>regular expression given in reverse Polish notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="109" column="1" bodyfile="nfa.py" bodystart="109" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a42f933055dd9fadc2a95f6f3484dc096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition> bool read</definition>
        <argsstring>(self, str string)</argsstring>
        <name>read</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>str</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Answers the question whether the string can be read by the <ref refid="classFormalLangPractice1task13_1_1nfa_1_1NFA" kindref="compound">NFA</ref> This method uses the breadth-first search algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>the string passed by the user </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the string can be read by an automaton </para>
</simplesect>
<simplesect kind="return"><para>False if the string can&apos;t be read by an automaton </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="126" column="1" bodyfile="nfa.py" bodystart="126" bodyend="153"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a8cc823aafc0ac7b770bdb45b2b851757" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def _make_dump</definition>
        <argsstring>(self)</argsstring>
        <name>_make_dump</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
<para>Take a snapshot of a nondeterministic finite automaton using the dump library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nfa.py" line="122" column="1" bodyfile="nfa.py" bodystart="122" bodyend="125"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Section: Working with <ref refid="classFormalLangPractice1task13_1_1nfa_1_1NFA" kindref="compound">NFA</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>Nondeterministic finite automaton It consists of a list of states, in which, inside each state, all possible transitions to other states are stored, allowed by a regular expression specified by the user in reverse Polish notation. </para>
    </detaileddescription>
    <location file="nfa.py" line="95" column="1" bodyfile="nfa.py" bodystart="95" bodyend="157"/>
    <listofallmembers>
      <member refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a1be0698cef9313432d31dd5028cd7654" prot="public" virt="non-virtual"><scope>FormalLangPractice1task13::nfa::NFA</scope><name>__init__</name></member>
      <member refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a8cc823aafc0ac7b770bdb45b2b851757" prot="private" virt="non-virtual"><scope>FormalLangPractice1task13::nfa::NFA</scope><name>_make_dump</name></member>
      <member refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a46a85338742bf5c446ee7a462d658889" prot="public" virt="non-virtual"><scope>FormalLangPractice1task13::nfa::NFA</scope><name>final</name></member>
      <member refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a8d0dd69a20182cd1647f229af000cfa5" prot="public" virt="non-virtual"><scope>FormalLangPractice1task13::nfa::NFA</scope><name>initial</name></member>
      <member refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a7d3a7a8f8b193c3a91a80dac71dcb75c" prot="public" virt="non-virtual"><scope>FormalLangPractice1task13::nfa::NFA</scope><name>nodes</name></member>
      <member refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a6da5270e48c8b5c2f0dbaa008af4df76" prot="public" virt="non-virtual"><scope>FormalLangPractice1task13::nfa::NFA</scope><name>nodes</name></member>
      <member refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a42f933055dd9fadc2a95f6f3484dc096" prot="public" virt="non-virtual"><scope>FormalLangPractice1task13::nfa::NFA</scope><name>read</name></member>
      <member refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1adc6e5733fc3c22f0a7b2914188c49c90" prot="public" virt="non-virtual"><scope>FormalLangPractice1task13::nfa::NFA</scope><name>state</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
