<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="nfa_8py" kind="file" language="Python">
    <compoundname>nfa.py</compoundname>
    <innerclass refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA" prot="public">FormalLangPractice1task13::nfa::_CreateNFA</innerclass>
    <innerclass refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" prot="public">FormalLangPractice1task13::nfa::_Node</innerclass>
    <innerclass refid="classFormalLangPractice1task13_1_1nfa_1_1NFA" prot="public">FormalLangPractice1task13::nfa::NFA</innerclass>
    <innernamespace refid="namespaceFormalLangPractice1task13_1_1nfa">FormalLangPractice1task13::nfa</innernamespace>
    <briefdescription>
<para>A module for building nondeterministic finite automaton. </para>
    </briefdescription>
    <detaileddescription>
<sect1 id="index_1description_main">
<title>Description</title>
<para>Building an automaton based on a regular expression written in reverse Polish notation. With some additional functionality to solve the problem.</para>
</sect1>
<sect1 id="nfa_8py_1libraries_main">
<title>Libraries/Modules</title>
<para><itemizedlist>
<listitem><para>dump - module makes it possible to unload information about nondeterministic finite automaton to a file </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceFormalLangPractice1task13_1_1nfa" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>@brief<sp/>Python<sp/>Library<sp/>to<sp/>solve<sp/>homework:<sp/>&apos;Formal<sp/>Languages,<sp/>Practice<sp/>1,<sp/>task<sp/>13&apos;&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@section<sp/>author<sp/>Author(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/>-<sp/>Created<sp/>by<sp/>Andrey<sp/>Krotov<sp/>on<sp/>17/10/2021</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/>-<sp/>Modified<sp/>by<sp/>Andrey<sp/>Krotov<sp/>on<sp/>17/10/2021</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>(c)<sp/>2021<sp/>Andrey<sp/>Krotov.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Imports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespaceFormalLangPractice1task13_1_1dump" kindref="compound">FormalLangPractice1task13.dump</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>__dump_stack__</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logging.config</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>os<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>path,<sp/>remove</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>json</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Logging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>path.isfile(</highlight><highlight class="stringliteral">&quot;./logs/logs.log&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>remove(</highlight><highlight class="stringliteral">&quot;./logs/logs.log&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(</highlight><highlight class="stringliteral">&quot;./FormalLangPractice1task13/logging_configuration.json&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;r&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>logging_configuration_file:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>config_dict<sp/>=<sp/>json.load(logging_configuration_file)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">logging.config.dictConfig(config_dict)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">__alphabet_of_operators<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="38"><highlight class="normal">__alphabet_of_letters<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;c&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_is_letter(symbol:<sp/>str)<sp/>-&gt;<sp/>bool:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>Checks<sp/>for<sp/>the<sp/>presence<sp/>of<sp/>a<sp/>character<sp/>in<sp/>the<sp/>alphabet.</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@param<sp/>symbol<sp/>user-supplied<sp/>character</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@return<sp/>True<sp/>if<sp/>symbol<sp/>in<sp/>alphabet</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@return<sp/>False<sp/>if<sp/>symbol<sp/>not<sp/>in<sp/>alphabet</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>symbol<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>__alphabet_of_letters:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" kindref="compound">_Node</ref>:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>Node<sp/>-<sp/>state<sp/>of<sp/>NKA<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Dictionary<sp/>of<sp/>transitions,<sp/>where<sp/>you<sp/>can<sp/>go<sp/>by<sp/>adding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>a<sp/>letter<sp/>to<sp/>your<sp/>word<sp/>-<sp/>a<sp/>key<sp/>from<sp/>the<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>transitions<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Label<sp/>that<sp/>indicates<sp/>whether<sp/>the<sp/>automaton<sp/>terminates<sp/>when<sp/>it<sp/>enters<sp/>this<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>final<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node_1ae8d7d57832bfb87f45bdc9b6e8bfc030" kindref="member">__init__</ref>(self,<sp/>transitions=None,<sp/>final=False):</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node_1a2594171e7c2a90ab61e43e1bc68adaf7" kindref="member">transitions</ref><sp/>=<sp/>transitions</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node_1af28a838c358ed1f4ae4ebd0b702ea078" kindref="member">final</ref><sp/>=<sp/>final</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_is_way_to(state:<sp/>_Node,<sp/>letter:<sp/>str)<sp/>-&gt;<sp/>bool:</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>Checks<sp/>for<sp/>the<sp/>presence<sp/>letter<sp/>in<sp/>possible<sp/>transitions</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@param<sp/>state<sp/>state<sp/>of<sp/>NFA</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@param<sp/>letter<sp/>letter<sp/>from<sp/>preset<sp/>alphabet</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@return<sp/>True<sp/>if<sp/>ways<sp/>exist</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@return<sp/>False<sp/>if<sp/>ways<sp/>don&apos;t<sp/>exist</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>letter<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>state.transitions:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(state.transitions[letter])<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_get_ways(state:<sp/>_Node,<sp/>letter:<sp/>str)<sp/>-&gt;<sp/>list:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>states<sp/>that<sp/>can<sp/>be<sp/>entered<sp/>by<sp/>a<sp/>given<sp/>letter</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@param<sp/>state<sp/>state<sp/>of<sp/>NFA</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@param<sp/>letter<sp/>letter<sp/>from<sp/>preset<sp/>alphabet</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@return<sp/>list<sp/>list<sp/>of<sp/>states<sp/>that<sp/>can<sp/>be<sp/>entered<sp/>by<sp/>a<sp/>given<sp/>letter</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>letter<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>state.transitions:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.transitions[letter]</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="classFormalLangPractice1task13_1_1nfa_1_1NFA" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFormalLangPractice1task13_1_1nfa_1_1NFA" kindref="compound">NFA</ref>:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>Nondeterministic<sp/>finite<sp/>automaton</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>It<sp/>consists<sp/>of<sp/>a<sp/>list<sp/>of<sp/>states,<sp/>in<sp/>which,<sp/>inside<sp/>each<sp/>state,</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>all<sp/>possible<sp/>transitions<sp/>to<sp/>other<sp/>states<sp/>are<sp/>stored,<sp/>allowed<sp/>by</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>a<sp/>regular<sp/>expression<sp/>specified<sp/>by<sp/>the<sp/>user<sp/>in<sp/>reverse<sp/>Polish<sp/>notation.</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>starting<sp/>state<sp/>of<sp/>nondeterministic<sp/>finite<sp/>automaton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>initial<sp/>=<sp/><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" kindref="compound">_Node</ref>()</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>List<sp/>of<sp/>states<sp/>of<sp/>nondeterministic<sp/>finite<sp/>automaton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>final<sp/>state<sp/>of<sp/>nondeterministic<sp/>finite<sp/>automaton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>final<sp/>=<sp/><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" kindref="compound">_Node</ref>()</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a1be0698cef9313432d31dd5028cd7654" kindref="member">__init__</ref>(self,<sp/>reg_exp:<sp/>str<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>Initialize<sp/>method<sp/>from<sp/>a<sp/>regExp<sp/>in<sp/>reverse<sp/>Polish<sp/>notation</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@param<sp/>reg_exp:<sp/>regular<sp/>expression<sp/>given<sp/>in<sp/>reverse<sp/>Polish<sp/>notation</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>To<sp/>hide<sp/>unnecessary<sp/>functionality,<sp/>we<sp/>will<sp/>use<sp/>an<sp/>additional<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nfa<sp/>=<sp/><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA" kindref="compound">_CreateNFA</ref>(reg_exp).nfa</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a8d0dd69a20182cd1647f229af000cfa5" kindref="member">initial</ref><sp/>=<sp/>new_nfa.initial</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a7d3a7a8f8b193c3a91a80dac71dcb75c" kindref="member">nodes</ref><sp/>=<sp/>new_nfa.nodes</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a46a85338742bf5c446ee7a462d658889" kindref="member">final</ref><sp/>=<sp/>new_nfa.final</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref><sp/>=<sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a8d0dd69a20182cd1647f229af000cfa5" kindref="member">initial</ref></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_make_dump(self):</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>Take<sp/>a<sp/>snapshot<sp/>of<sp/>a<sp/>nondeterministic<sp/>finite<sp/>automaton<sp/>using<sp/>the<sp/>dump<sp/>library<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceFormalLangPractice1task13_1_1dump_1acc1a8e78078dde929a37b6d6535c5563" kindref="member">__dump_stack__</ref>(self,<sp/>filename=</highlight><highlight class="stringliteral">&apos;dump.log&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a42f933055dd9fadc2a95f6f3484dc096" kindref="member">read</ref>(self,<sp/>string:<sp/>str)<sp/>-&gt;<sp/>bool:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>Answers<sp/>the<sp/>question<sp/>whether<sp/>the<sp/>string<sp/>can<sp/>be<sp/>read<sp/>by<sp/>the<sp/>NFA</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>method<sp/>uses<sp/>the<sp/>breadth-first<sp/>search<sp/>algorithm</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@param<sp/>string<sp/>the<sp/>string<sp/>passed<sp/>by<sp/>the<sp/>user</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@return<sp/>True<sp/>if<sp/>the<sp/>string<sp/>can<sp/>be<sp/>read<sp/>by<sp/>an<sp/>automaton</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@return<sp/>False<sp/>if<sp/>the<sp/>string<sp/>can&apos;t<sp/>be<sp/>read<sp/>by<sp/>an<sp/>automaton</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Putting<sp/>the<sp/>starting<sp/>state<sp/>in<sp/>the<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>[[self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1NFA_1a8d0dd69a20182cd1647f229af000cfa5" kindref="member">initial</ref>,<sp/>index]]</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>len(q)<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Take<sp/>out<sp/>the<sp/>current<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/>=<sp/>q[0][0]</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind<sp/>=<sp/>q[0][1]</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.pop(0)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Processing<sp/>eps<sp/>transitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>next_state<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_get_ways(state,<sp/></highlight><highlight class="stringliteral">&apos;eps&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.append([next_state,<sp/>ind])</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ind<sp/>&lt;<sp/>len(string):</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Put<sp/>in<sp/>the<sp/>queue<sp/>all<sp/>states<sp/>reachable<sp/>by<sp/>a<sp/>given<sp/>letter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>_is_way_to(state,<sp/>string[ind]):</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>next_state<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_get_ways(state,<sp/>string[ind]):</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.append([next_state,<sp/>ind<sp/>+<sp/>1])</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>state.final:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA" kindref="compound">_CreateNFA</ref>:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>Functor<sp/>for<sp/>creating<sp/>NFA<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>initial<sp/>=<sp/><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" kindref="compound">_Node</ref>()</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>List<sp/>of<sp/>states<sp/>of<sp/>nondeterministic<sp/>finite<sp/>automaton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>final<sp/>state<sp/>of<sp/>nondeterministic<sp/>finite<sp/>automaton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>final<sp/>=<sp/><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" kindref="compound">_Node</ref>()</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Created<sp/>NFA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>nfa<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Log<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>logger<sp/>=<sp/>logging.getLogger(__name__)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>stack<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a5c3712c31bdf8318bd4b732d4e99014b" kindref="member">reg_concatenation</ref>(self):</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>Regex<sp/>concatenation</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>method<sp/>takes<sp/>the<sp/>last<sp/>two<sp/>elements<sp/>in<sp/>stack<sp/>and<sp/>concatenates.</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_nfa,<sp/>second_nfa<sp/>=<sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>[-2],<sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>[-1]</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>.pop(),<sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>.pop()</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Supplementing<sp/>the<sp/>automaton<sp/>with<sp/>vertices<sp/>from<sp/>the<sp/>second<sp/>automaton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_nfa.final.final<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_nfa.nodes<sp/>+=<sp/>second_nfa.nodes</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Throw<sp/>&apos;eps&apos;<sp/>the<sp/>transition<sp/>between<sp/>the<sp/>end<sp/>of<sp/>the<sp/>first<sp/>and<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>first_nfa.final.transitions:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_nfa.final.transitions.setdefault(</highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_nfa.final.transitions[</highlight><highlight class="stringliteral">&apos;eps&apos;</highlight><highlight class="normal">].append(second_nfa.initial)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_nfa.final<sp/>=<sp/>second_nfa.final</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>.append(first_nfa)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>IndexError<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a0b14e488ae28d98d262453f3e9cd6e4d" kindref="member">logger</ref>.error(e)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>e</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a377c78827ef6e6c6bfa1e88c880b6882" kindref="member">reg_iteration</ref>(self):</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>Regex<sp/>iteration</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>method<sp/>takes<sp/>the<sp/>last<sp/>element<sp/>and<sp/>applies<sp/>the<sp/>Kleene<sp/>star</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Throw<sp/>&apos;eps&apos;<sp/>the<sp/>transition<sp/>between<sp/>the<sp/>end<sp/>of<sp/>the<sp/>first<sp/>and<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>[-1].final.transitions:</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>[-1].final.transitions.setdefault(</highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>[-1].final.transitions[</highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">].append(self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>[-1].initial)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>we<sp/>replace<sp/>the<sp/>end<sp/>of<sp/>the<sp/>automaton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>[-1].final.final<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>[-1].final<sp/>=<sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>[-1].initial</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>[-1].final.final<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a57eb512c08bd3207c3a41667f054dc65" kindref="member">reg_or</ref>(self):</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>boolean<sp/>&apos;or&apos;<sp/>for<sp/>regular<sp/>expressions</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>method<sp/>takes<sp/>the<sp/>last<sp/>two<sp/>elements<sp/>in<sp/>stack<sp/>and<sp/>forks<sp/>them<sp/>into<sp/>one<sp/>block</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>help<sp/>of<sp/>two<sp/>additional<sp/>states.</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_nfa,<sp/>second_nfa<sp/>=<sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>[-2],<sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>[-1]</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>.pop(),<sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>.pop()</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nfa<sp/>=<sp/><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA" kindref="compound">_CreateNFA</ref>()</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_nfa.final.final<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second_nfa.final.final<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Epsilon<sp/>transitions<sp/>collecting<sp/>a<sp/>new<sp/>automaton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>new_nfa.final.transitions:</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nfa.final.transitions.setdefault(</highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>new_nfa.initial.transitions:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nfa.initial.transitions.setdefault(</highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>first_nfa.final.transitions:</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_nfa.final.transitions.setdefault(</highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>second_nfa.initial.transitions:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second_nfa.final.transitions.setdefault(</highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nfa.initial.transitions[</highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">].append(first_nfa.initial)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nfa.initial.transitions[</highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">].append(second_nfa.initial)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_nfa.final.transitions[</highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">].append(new_nfa.final)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second_nfa.final.transitions[</highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">].append(new_nfa.final)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nfa.initial<sp/>=<sp/>new_nfa.initial</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nfa.final<sp/>=<sp/>new_nfa.final</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nfa.nodes<sp/>+=<sp/>first_nfa.nodes</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nfa.nodes<sp/>+=<sp/>second_nfa.nodes</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>.append(new_nfa)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a62d114c8017936187a4b318c581e0bb3" kindref="member">__init__</ref>(self,<sp/>reg_exp=None):</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>reg_exp<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a8d0dd69a20182cd1647f229af000cfa5" kindref="member">initial</ref><sp/>=<sp/><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" kindref="compound">_Node</ref>()</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a7d3a7a8f8b193c3a91a80dac71dcb75c" kindref="member">nodes</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a46a85338742bf5c446ee7a462d658889" kindref="member">final</ref><sp/>=<sp/><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" kindref="compound">_Node</ref>()</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a1022bdba60126eb63ecd2f2c612fe07a" kindref="member">nfa</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(reg_exp)):</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>_is_letter(reg_exp[i]):</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nfa<sp/>=<sp/><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA" kindref="compound">_CreateNFA</ref>()</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>reg_exp[i]<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>new_nfa.initial.transitions:</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nfa.initial.transitions.setdefault(reg_exp[i],<sp/>[])</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nfa.initial.transitions[reg_exp[i]].append(new_nfa.final)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>.append(new_nfa)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>reg_exp[i]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a5c3712c31bdf8318bd4b732d4e99014b" kindref="member">reg_concatenation</ref>()</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>reg_exp[i]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a377c78827ef6e6c6bfa1e88c880b6882" kindref="member">reg_iteration</ref>()</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>reg_exp[i]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a57eb512c08bd3207c3a41667f054dc65" kindref="member">reg_or</ref>()</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>reg_exp[i]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(f</highlight><highlight class="stringliteral">&apos;No<sp/>such<sp/>operation<sp/>or<sp/>letter:<sp/>{reg_exp[i]}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a1022bdba60126eb63ecd2f2c612fe07a" kindref="member">nfa</ref><sp/>=<sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1aa8ff6a66ecd9f102758d009c7bf3d32f" kindref="member">stack</ref>[-1]</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>ValueError<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a0b14e488ae28d98d262453f3e9cd6e4d" kindref="member">logger</ref>.error(e)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>e</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>print(try<sp/>again)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a7d3a7a8f8b193c3a91a80dac71dcb75c" kindref="member">nodes</ref><sp/>=<sp/>[<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" kindref="compound">_Node</ref>(dict()),<sp/><ref refid="classFormalLangPractice1task13_1_1nfa_1_1__Node" kindref="compound">_Node</ref>(dict(),<sp/>final=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a8d0dd69a20182cd1647f229af000cfa5" kindref="member">initial</ref><sp/>=<sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a7d3a7a8f8b193c3a91a80dac71dcb75c" kindref="member">nodes</ref>[0]</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a46a85338742bf5c446ee7a462d658889" kindref="member">final</ref><sp/>=<sp/>self.<ref refid="classFormalLangPractice1task13_1_1nfa_1_1__CreateNFA_1a7d3a7a8f8b193c3a91a80dac71dcb75c" kindref="member">nodes</ref>[1]</highlight></codeline>
    </programlisting>
    <location file="nfa.py"/>
  </compounddef>
</doxygen>
